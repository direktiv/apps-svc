description: |
  Service to upload an app's swagger file. 
  The instance input must be a JSON object containing 'uri', 'tag', and 'data', where 'data' is a base64 encoded YAML swagger spec.
  The workflow will process the swagger spec and generate other information.
  The /rebuild workflow should be executed after this one. Either periodically as a cron, or manually.
functions:
- type: subflow
  id: key
  workflow: '/uri-tag-key'
- id: docs
  image: localhost:5000/swagger2markdown
  type: knative-workflow
- id: pq
  type: subflow
  workflow: "/pq"
- type: knative-workflow
  id: yaml
  image: localhost:5000/yaml2json
states:
- id: stringify-args
  type: action 
  action:
    function: key
    input: 'jq(.)'
  transform: 'jq(.args = .return | del(.return))'
  transition: swagger-tempfile
- id: swagger-tempfile
  type: setter
  variables:
    - scope: instance
      key: spec
      mimeType: text/plain
      value: 'jq(.data | @base64d)'
  transition: parse-swagger
- id: parse-swagger
  type: action
  action:
    function: yaml 
    files:
      - key: spec
        scope: instance
    input:
      data: spec
      output-format: json 
      input-type: file
  transform: 'jq(.spec = .return.output.result | del(.return))'
  transition: generate-docs
- id: generate-docs
  type: noop
  # type: action 
  # action:
  #   funcion: docs 
  #   input: 'jq(.data)'
  transition: store-data
- id: store-data
  type: setter
  variables:
  - scope: namespace
    key: 'jq(("swagger_" + .args.key))'
    mimeType: 'text/plain'
    value: 'jq(.data | @base64d)'
  - scope: namespace
    key: 'jq(("spec_" + .args.key))'
    value: 'jq(.spec)'
  # - scope: namespace 
  #   key: 'jq(("md_" + .args.key))'
  #   mimeType: 'text/markdown'
  #   value: 'jq(.return)'
  transition: update-database
- id: update-database
  type: action 
  action:
    function: pq 
    input:
      queries: 
        - "UPDATE apps SET created_at = now() WHERE uri = :'URI' AND tag = :'TAG'"
        - "INSERT INTO apps (uri, tag) VALUES (:'URI', :'TAG') ON CONFLICT (uri,tag) DO NOTHING"
      args:
        - 'jq("URI=" + .args.uri)'
        - 'jq("TAG=" + .args.tag)'
