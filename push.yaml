description: |
  Service to upload an app's swagger file. 
  The instance input must be a JSON object containing 'uri', 'tag', and 'data', where 'data' is a base64 encoded YAML swagger spec.
  The workflow will process the swagger spec and generate other information.
  The /rebuild workflow should be executed after this one. Either periodically as a cron, or manually.
functions:
- id: docs
  image: direktiv/swagger2markdown:v0.0.2
  type: knative-workflow
- id: pq
  type: subflow
  workflow: db/pq
- id: logo
  type: subflow
  workflow: upload-icon
- type: knative-workflow
  id: yaml
  image: direktiv/yaml2json:v0.0.1
states:
- id: validate
  type: validate
  schema:
    title: Data
    type: object
    required:
    - data
    properties:
      data:
        type: string
        title: Base64 Swagger File
      logo:
        type: string
        title: Base64 Logo File
  transition: swagger-tempfile

- id: swagger-tempfile
  type: setter
  variables:
    - scope: instance
      key: spec
      mimeType: text/plain
      value: 'jq(.data | @base64d)'
  transition: parse-swagger
- id: parse-swagger
  type: action
  action:
    function: yaml 
    files:
      - key: spec
        scope: instance
    input:
      data: spec
      output-format: json 
      input-type: file
  transform: 'jq(.spec = .return.output.result | del(.return) | .uri = .spec.info."x-direktiv-meta".container | .tag = .spec.info.version)'
  transition: generate-docs

# generate markdown 
- id: generate-docs
  type: action 
  action:
    function: docs 
    files:
    - key: spec
      scope: instance 
      as: swagger.yaml
    - key: docs.gotmpl
      scope: namespace
      as: template
    input: 
      template: template
  transform: 'jq(.docs = .return.readme | del(.return))'
  transition: update-database
- id: update-database
  type: action 
  action:
    function: pq 
    input:
      queries: 
        - "UPDATE apps SET created_at = now() WHERE uri = :'URI' AND tag = :'TAG'"
        - >- 
          INSERT INTO apps (uri, tag, md, icon, swagger, info) VALUES 
          (:'URI', :'TAG', decode(:'DOCS', 'base64'), null, decode(:'SWAGGER', 'base64'), decode(:'INFO', 'base64'))
          ON CONFLICT (uri,tag) DO 
          UPDATE SET md = decode(:'DOCS', 'base64'), swagger = decode(:'SWAGGER', 'base64'), info = decode(:'INFO', 'base64')
      args:
        - 'jq("URI=" + .uri)'
        - 'jq("TAG=" + .tag)'
        - 'jq("DOCS=" + .docs)'
        - 'jq("SWAGGER=" + .data)'
        - 'jq("INFO=" + (.spec.info | @base64 ))'
  transition: logo-check

# if logo is in that request we process it
- id: logo-check
  type: switch
  conditions:
  - condition: jq(.logo // "")
    transition: resize-logo

# if there is a logo in the request we resize it
- id: resize-logo
  type: action
  action:
    function: logo
    input:
      uri: jq(.uri)
      data: jq(.logo)
